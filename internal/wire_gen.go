// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/hhr0815hhr/gint/internal/controller"
	"github.com/hhr0815hhr/gint/internal/database/model"
	"github.com/hhr0815hhr/gint/internal/database/mysql"
	"github.com/hhr0815hhr/gint/internal/logic"
	"github.com/hhr0815hhr/gint/internal/server/http"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() *AppInfo {
	testController := controller.NewTestController()
	httpRoutes := ProvideRoutes(testController)
	engine := http.NewHTTPServer(httpRoutes)
	db := mysql.ProvideDB()
	testRepo := model.NewTestRepo(db)
	testLogic := logic.NewTestLogic(testRepo)
	appInfo := ProvideApp(engine, testLogic)
	return appInfo
}

// wire.go:

type AppInfo struct {
	Engine    *gin.Engine
	TestLogic *logic.TestLogic
	Data      map[string]interface{}
}

func ProvideApp(
	engine *gin.Engine,
	testLogic *logic.TestLogic,
) *AppInfo {
	return &AppInfo{
		Engine:    engine,
		TestLogic: testLogic,
		Data:      map[string]interface{}{},
	}
}

var DbSet = wire.NewSet(mysql.ProvideDB)

var RepoSet = wire.NewSet(model.NewTestRepo)

var LogicSet = wire.NewSet(logic.NewTestLogic)

var RouteSet = wire.NewSet(controller.NewTestController)

func ProvideRoutes(
	test *controller.TestController,
) *http.HTTPRoutes {
	return &http.HTTPRoutes{
		Routers: []controller.Router{
			test,
		},
	}
}
